//HintName: TestNs.TestVM.ReactiveCollections.g.cs
// <auto-generated/>
using ReactiveUI;

#pragma warning disable
#nullable enable
namespace TestNs
{
    
    public partial class TestVM
    {
        /// <inheritdoc cref="_publicObservableCollectionTest"/>
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public global::System.Collections.ObjectModel.ObservableCollection<int>? PublicObservableCollectionTest
        {
            get => _publicObservableCollectionTest;
            set
            {
                if (value == null)
                {
                    PublicObservableCollectionTest.CollectionChanged -= CollectionChanged(this, nameof(PublicObservableCollectionTest));
                }

                _publicObservableCollectionTest = value;
                this.RaisePropertyChanged(nameof(PublicObservableCollectionTest));

                if (_publicObservableCollectionTest != null)
                {
                    // Remove the old handler if it exists
                    PublicObservableCollectionTest.CollectionChanged -= CollectionChanged(this, nameof(PublicObservableCollectionTest));

                    PublicObservableCollectionTest.CollectionChanged += CollectionChanged(this, nameof(PublicObservableCollectionTest));
                }
            }
        }

        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        private static global::System.Collections.Specialized.NotifyCollectionChangedEventHandler CollectionChanged(IReactiveObject @this, string propName)=> (_, _) =>  @this.RaisePropertyChanged(propName);
    }
}
#nullable restore
#pragma warning restore