// Copyright (c) 2024 .NET Foundation and Contributors. All rights reserved.
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for full license information.

using System.CodeDom.Compiler;
using System.IO;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using ReactiveUI.SourceGenerators.Helpers;
using ReactiveUI.SourceGenerators.Input.Models;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace ReactiveUI.SourceGenerators;

/// <summary>
/// IViewForGenerator.
/// </summary>
/// <seealso cref="IIncrementalGenerator" />
public partial class IViewForGenerator
{
    internal static class Execute
    {
        internal static CompilationUnitSyntax GetIViewForWpfWinUiUno(IViewForInfo iViewForInfo)
        {
            UsingDirectiveSyntax[] usings = [];
            if (iViewForInfo.BaseType == IViewForBaseType.Wpf)
            {
                usings =
                    [
                        UsingDirective(ParseName("ReactiveUI")),
                        UsingDirective(ParseName("System.Windows")),
                    ];
            }
            else if (iViewForInfo.BaseType == IViewForBaseType.WinUI)
            {
                usings =
                    [
                        UsingDirective(ParseName("ReactiveUI")),
                        UsingDirective(ParseName("Microsoft.UI.Xaml")),
                    ];
            }
            else if (iViewForInfo.BaseType == IViewForBaseType.Uno)
            {
                usings =
                    [
                        UsingDirective(ParseName("ReactiveUI")),
                        UsingDirective(ParseName("Windows.UI.Xaml")),
                    ];
            }

            var code = CompilationUnit().AddMembers(
                    NamespaceDeclaration(IdentifierName(iViewForInfo.ClassNamespace))
                    .WithLeadingTrivia(TriviaList(
                        Comment("// <auto-generated/>"),
                        Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
                        Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))))
                    .AddMembers(
                        ClassDeclaration(iViewForInfo.ClassName)
                        .AddBaseListTypes(
                            SimpleBaseType(
                                GenericName(Identifier("IViewFor"))
                                .WithTypeArgumentList(
                                    TypeArgumentList(
                                        SingletonSeparatedList<TypeSyntax>(
                                            IdentifierName(iViewForInfo.ViewModelTypeName))))))
                        .AddModifiers([.. iViewForInfo.DeclarationSyntax.Modifiers])
                        .AddAttributeLists(AttributeList(SingletonSeparatedList(
                            Attribute(IdentifierName(AttributeDefinitions.GeneratedCode))
                            .AddArgumentListArguments(
                                AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).FullName))),
                                AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).Assembly.GetName().Version.ToString())))))))))
                .WithUsings(List(usings))
                .NormalizeWhitespace().ToFullString();

            // Remove the last 4 characters to remove the closing brackets
            var baseCode = code.Remove(code.Length - 4);

            // Prepare all necessary type names with type arguments
            using var stringStream = new StringWriter();
            using var writer = new IndentedTextWriter(stringStream, "\t");
            writer.WriteLine(baseCode);
            writer.Indent++;
            writer.Indent++;

            // Add the necessary properties and methods for IViewFor.
            writer.WriteLine("/// <summary>");
            writer.WriteLine("/// The view model dependency property.");
            writer.WriteLine("/// </summary>");
            writer.WriteLine("public static readonly DependencyProperty ViewModelProperty =");
            writer.Indent++;
            writer.WriteLine("DependencyProperty.Register(");
            writer.WriteLine("nameof(ViewModel),");
            writer.WriteLine($"typeof({iViewForInfo.ViewModelTypeName}),");
            writer.WriteLine($"typeof(IViewFor<{iViewForInfo.ViewModelTypeName}>),");
            writer.WriteLine("new PropertyMetadata(null));");
            writer.WriteLine();

            writer.Indent--;
            writer.WriteLine("/// <summary>");
            writer.WriteLine("/// Gets the binding root view model.");
            writer.WriteLine("/// </summary>");
            writer.WriteLine($"public {iViewForInfo.ViewModelTypeName}? BindingRoot => ViewModel;");
            writer.WriteLine();

            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine($"public {iViewForInfo.ViewModelTypeName}? ViewModel");
            writer.WriteLine(Token(SyntaxKind.OpenBraceToken));
            writer.Indent++;
            writer.WriteLine($"get => ({iViewForInfo.ViewModelTypeName}?)GetValue(ViewModelProperty);");
            writer.WriteLine("set => SetValue(ViewModelProperty, value);");
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.WriteLine();

            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine("object? IViewFor.ViewModel");
            writer.WriteLine(Token(SyntaxKind.OpenBraceToken));
            writer.Indent++;
            writer.WriteLine("get => ViewModel;");
            writer.WriteLine($"set => ViewModel = ({iViewForInfo.ViewModelTypeName}?)value;");
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.WriteLine(TriviaList(
                                Trivia(NullableDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)),
                                Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)))
                                .NormalizeWhitespace());

            var output = stringStream.ToString();
            return ParseCompilationUnit(output).NormalizeWhitespace();
        }

        internal static CompilationUnitSyntax GetIViewForWinForms(IViewForInfo iViewForInfo)
        {
            UsingDirectiveSyntax[] usings =
                [
                    UsingDirective(ParseName("ReactiveUI")),
                    UsingDirective(ParseName("System.ComponentModel")),
                ];

            var code = CompilationUnit().AddMembers(
                    NamespaceDeclaration(IdentifierName(iViewForInfo.ClassNamespace))
                    .WithLeadingTrivia(TriviaList(
                        Comment("// <auto-generated/>"),
                        Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
                        Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))))
                    .AddMembers(
                        ClassDeclaration(iViewForInfo.ClassName)
                        .AddBaseListTypes(
                            SimpleBaseType(
                                GenericName(Identifier("IViewFor"))
                                .WithTypeArgumentList(
                                    TypeArgumentList(
                                        SingletonSeparatedList<TypeSyntax>(
                                            IdentifierName(iViewForInfo.ViewModelTypeName))))))
                        .AddModifiers([.. iViewForInfo.DeclarationSyntax.Modifiers])
                        .AddAttributeLists(AttributeList(SingletonSeparatedList(
                            Attribute(IdentifierName(AttributeDefinitions.GeneratedCode))
                            .AddArgumentListArguments(
                                AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).FullName))),
                                AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).Assembly.GetName().Version.ToString())))))))))
                .WithUsings(List(usings))
                .NormalizeWhitespace().ToFullString();

            // Remove the last 4 characters to remove the closing brackets
            var baseCode = code.Remove(code.Length - 4);

            // Prepare all necessary type names with type arguments
            using var stringStream = new StringWriter();
            using var writer = new IndentedTextWriter(stringStream, "\t");
            writer.WriteLine(baseCode);
            writer.Indent++;
            writer.Indent++;

            // Add the necessary properties and methods for IViewFor.
            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine("[Category(\"ReactiveUI\")]");
            writer.WriteLine("[Description(\"The ViewModel.\")]");
            writer.WriteLine("[Bindable(true)]");
            writer.WriteLine("[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]");
            writer.WriteLine($"public {iViewForInfo.ViewModelTypeName}? ViewModel " + "{ get; set; }");
            writer.WriteLine();

            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine("object? IViewFor.ViewModel");
            writer.WriteLine(Token(SyntaxKind.OpenBraceToken));
            writer.Indent++;
            writer.WriteLine("get => ViewModel;");
            writer.WriteLine($"set => ViewModel = ({iViewForInfo.ViewModelTypeName}?)value;");
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.WriteLine(TriviaList(
                                Trivia(NullableDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)),
                                Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)))
                                .NormalizeWhitespace());

            var output = stringStream.ToString();
            return ParseCompilationUnit(output).NormalizeWhitespace();
        }

        internal static CompilationUnitSyntax GetIViewForAvalonia(IViewForInfo iViewForInfo)
        {
            UsingDirectiveSyntax[] usings =
                [
                    UsingDirective(ParseName("System")),
                    UsingDirective(ParseName("ReactiveUI")),
                    UsingDirective(ParseName("Avalonia.Controls")),
                ];

            var code = CompilationUnit().AddMembers(
                    NamespaceDeclaration(IdentifierName(iViewForInfo.ClassNamespace))
                    .WithLeadingTrivia(TriviaList(
                        Comment("// <auto-generated/>"),
                        Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
                        Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))))
                    .AddMembers(
                        ClassDeclaration(iViewForInfo.ClassName)
                        .AddBaseListTypes(
                            SimpleBaseType(
                                GenericName(Identifier("IViewFor"))
                                .WithTypeArgumentList(
                                    TypeArgumentList(
                                        SingletonSeparatedList<TypeSyntax>(
                                            IdentifierName(iViewForInfo.ViewModelTypeName))))))
                        .AddModifiers([.. iViewForInfo.DeclarationSyntax.Modifiers])
                        .AddAttributeLists(AttributeList(SingletonSeparatedList(
                            Attribute(IdentifierName(AttributeDefinitions.GeneratedCode))
                            .AddArgumentListArguments(
                                AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).FullName))),
                                AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).Assembly.GetName().Version.ToString())))))))))
                .WithUsings(List(usings))
                .NormalizeWhitespace().ToFullString();

            // Remove the last 4 characters to remove the closing brackets
            var baseCode = code.Remove(code.Length - 4);

            // Prepare all necessary type names with type arguments
            using var stringStream = new StringWriter();
            using var writer = new IndentedTextWriter(stringStream, "\t");
            writer.WriteLine(baseCode);
            writer.Indent++;
            writer.Indent++;

            // Add the necessary properties and methods for IViewFor.
            writer.WriteLine("/// <summary>");
            writer.WriteLine("/// The view model dependency property.");
            writer.WriteLine("/// </summary>");
            writer.WriteLine("[System.Diagnostics.CodeAnalysis.SuppressMessage(\"AvaloniaProperty\", \"AVP1002\", Justification = \"Generic avalonia property is expected here.\")]");
            writer.WriteLine($"public static readonly StyledProperty<{iViewForInfo.ViewModelTypeName}?> ViewModelProperty =");
            writer.Indent++;
            writer.WriteLine("AvaloniaProperty");
            writer.WriteLine($".Register<IViewFor<{iViewForInfo.ViewModelTypeName}>, {iViewForInfo.ViewModelTypeName}?>(nameof(ViewModel));");

            writer.Indent--;
            writer.WriteLine("/// <summary>");
            writer.WriteLine("/// Gets the binding root view model.");
            writer.WriteLine("/// </summary>");
            writer.WriteLine($"public {iViewForInfo.ViewModelTypeName}? BindingRoot => ViewModel;");
            writer.WriteLine();

            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine($"public {iViewForInfo.ViewModelTypeName}? ViewModel");
            writer.WriteLine(Token(SyntaxKind.OpenBraceToken));
            writer.Indent++;
            writer.WriteLine($"get => ({iViewForInfo.ViewModelTypeName}?)GetValue(ViewModelProperty);");
            writer.WriteLine("set => SetValue(ViewModelProperty, value);");
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.WriteLine();

            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine("object? IViewFor.ViewModel");
            writer.WriteLine(Token(SyntaxKind.OpenBraceToken));
            writer.Indent++;
            writer.WriteLine("get => ViewModel;");
            writer.WriteLine($"set => ViewModel = ({iViewForInfo.ViewModelTypeName}?)value;");
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.WriteLine();
            writer.WriteLine(@"
                protected override void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change)
                        {
                            base.OnPropertyChanged(change);

                            if (change.Property == DataContextProperty)
                            {
                                if (ReferenceEquals(change.OldValue, ViewModel)
                                    && change.NewValue is null or TViewModel)
                                {
                                    SetCurrentValue(ViewModelProperty, change.NewValue);
                                }
                            }
                            else if (change.Property == ViewModelProperty)
                            {
                                if (ReferenceEquals(change.OldValue, DataContext))
                                {
                                    SetCurrentValue(DataContextProperty, change.NewValue);
                                }
                            }
                        }
                ");
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.WriteLine(TriviaList(
                                Trivia(NullableDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)),
                                Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)))
                                .NormalizeWhitespace());

            var output = stringStream.ToString();
            return ParseCompilationUnit(output).NormalizeWhitespace();
        }

        internal static CompilationUnitSyntax GetIViewForMaui(IViewForInfo iViewForInfo)
        {
            UsingDirectiveSyntax[] usings =
                [
                    UsingDirective(ParseName("System")),
                    UsingDirective(ParseName("ReactiveUI")),
                    UsingDirective(ParseName("Microsoft.Maui.Controls")),
                ];

            var code = CompilationUnit().AddMembers(
                    NamespaceDeclaration(IdentifierName(iViewForInfo.ClassNamespace))
                    .WithLeadingTrivia(TriviaList(
                        Comment("// <auto-generated/>"),
                        Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
                        Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))))
                    .AddMembers(
                        ClassDeclaration(iViewForInfo.ClassName)
                        .AddBaseListTypes(
                            SimpleBaseType(
                                GenericName(Identifier("IViewFor"))
                                .WithTypeArgumentList(
                                    TypeArgumentList(
                                        SingletonSeparatedList<TypeSyntax>(
                                            IdentifierName(iViewForInfo.ViewModelTypeName))))))
                        .AddModifiers([.. iViewForInfo.DeclarationSyntax.Modifiers])
                        .AddAttributeLists(AttributeList(SingletonSeparatedList(
                            Attribute(IdentifierName(AttributeDefinitions.GeneratedCode))
                            .AddArgumentListArguments(
                                AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).FullName))),
                                AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).Assembly.GetName().Version.ToString())))))))))
                .WithUsings(List(usings))
                .NormalizeWhitespace().ToFullString();

            // Remove the last 4 characters to remove the closing brackets
            var baseCode = code.Remove(code.Length - 4);

            // Prepare all necessary type names with type arguments
            using var stringStream = new StringWriter();
            using var writer = new IndentedTextWriter(stringStream, "\t");
            writer.WriteLine(baseCode);
            writer.Indent++;
            writer.Indent++;

            // Add the necessary properties and methods for IViewFor.
            writer.WriteLine("public static readonly BindableProperty ViewModelProperty =");
            writer.WriteLine("BindableProperty.Create(");
            writer.WriteLine("nameof(ViewModel),");
            writer.WriteLine($"typeof({iViewForInfo.ViewModelTypeName}),");
            writer.WriteLine($"typeof(IViewFor<{iViewForInfo.ViewModelTypeName}>),");
            writer.WriteLine($"default({iViewForInfo.ViewModelTypeName}),");
            writer.WriteLine("BindingMode.OneWay,");
            writer.WriteLine("propertyChanged: OnViewModelChanged);");
            writer.WriteLine();

            writer.Indent--;
            writer.WriteLine("/// <summary>");
            writer.WriteLine("/// Gets the binding root view model.");
            writer.WriteLine("/// </summary>");
            writer.WriteLine($"public {iViewForInfo.ViewModelTypeName}? BindingRoot => ViewModel;");
            writer.WriteLine();

            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine($"public {iViewForInfo.ViewModelTypeName}? ViewModel");
            writer.WriteLine(Token(SyntaxKind.OpenBraceToken));
            writer.Indent++;
            writer.WriteLine($"get => ({iViewForInfo.ViewModelTypeName}?)GetValue(ViewModelProperty);");
            writer.WriteLine("set => SetValue(ViewModelProperty, value);");
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.WriteLine();

            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine("object? IViewFor.ViewModel");
            writer.WriteLine(Token(SyntaxKind.OpenBraceToken));
            writer.Indent++;
            writer.WriteLine("get => ViewModel;");
            writer.WriteLine($"set => ViewModel = ({iViewForInfo.ViewModelTypeName}?)value;");
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));

            writer.WriteLine();
            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine("protected override void OnBindingContextChanged()");
            writer.WriteLine(Token(SyntaxKind.OpenBraceToken));
            writer.WriteLine("base.OnBindingContextChanged();");
            writer.WriteLine($"ViewModel = BindingContext as {iViewForInfo.ViewModelTypeName};");
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));

            writer.WriteLine("private static void OnViewModelChanged(BindableObject bindableObject, object oldValue, object newValue) => bindableObject.BindingContext = newValue;");
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.WriteLine(TriviaList(
                                Trivia(NullableDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)),
                                Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)))
                                .NormalizeWhitespace());

            var output = stringStream.ToString();
            return ParseCompilationUnit(output).NormalizeWhitespace();
        }
    }
}
