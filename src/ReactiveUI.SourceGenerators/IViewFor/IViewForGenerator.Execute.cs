// Copyright (c) 2024 .NET Foundation and Contributors. All rights reserved.
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for full license information.

using System;
using System.CodeDom.Compiler;
using System.IO;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using ReactiveUI.SourceGenerators.Helpers;
using ReactiveUI.SourceGenerators.Input.Models;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace ReactiveUI.SourceGenerators;

/// <summary>
/// IViewForGenerator.
/// </summary>
/// <seealso cref="IIncrementalGenerator" />
public partial class IViewForGenerator
{
    internal static class Execute
    {
        internal static CompilationUnitSyntax GetIViewForWpfWinUiUno(IViewForInfo iViewForInfo)
        {
            UsingDirectiveSyntax[] usings = [];
            if (iViewForInfo.BaseType == IViewForBaseType.Wpf)
            {
                usings =
                    [
                        UsingDirective(ParseName("ReactiveUI")),
                        UsingDirective(ParseName("System.Windows")),
                    ];
            }
            else if (iViewForInfo.BaseType == IViewForBaseType.WinUI)
            {
                usings =
                    [
                        UsingDirective(ParseName("ReactiveUI")),
                        UsingDirective(ParseName("Microsoft.UI.Xaml")),
                    ];
            }
            else if (iViewForInfo.BaseType == IViewForBaseType.Uno)
            {
                usings =
                    [
                        UsingDirective(ParseName("ReactiveUI")),
                        UsingDirective(ParseName("Windows.UI.Xaml")),
                    ];
            }

            var code = CompilationUnit().AddMembers(
                    NamespaceDeclaration(IdentifierName(iViewForInfo.ClassNamespace))
                    .WithLeadingTrivia(TriviaList(
                        Comment("// <auto-generated/>"),
                        Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
                        Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))))
                    .AddMembers(
                        ClassDeclaration(iViewForInfo.ClassName)
                        .AddBaseListTypes(
                            SimpleBaseType(
                                GenericName(Identifier("IViewFor"))
                                .WithTypeArgumentList(
                                    TypeArgumentList(
                                        SingletonSeparatedList<TypeSyntax>(
                                            IdentifierName(iViewForInfo.ViewModelTypeName))))))
                        .AddModifiers([.. iViewForInfo.DeclarationSyntax.Modifiers])
                        .AddAttributeLists(AttributeList(SingletonSeparatedList(
                            Attribute(IdentifierName(AttributeDefinitions.GeneratedCode))
                            .AddArgumentListArguments(
                                AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).FullName))),
                                AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).Assembly.GetName().Version.ToString())))))))))
                .WithUsings(List(usings))
                .NormalizeWhitespace().ToFullString();

            // Remove the last 4 characters to remove the closing brackets
            var baseCode = code.Remove(code.Length - 4);

            // Prepare all necessary type names with type arguments
            using var stringStream = new StringWriter();
            using var writer = new IndentedTextWriter(stringStream, "\t");
            writer.WriteLine(baseCode);
            writer.Indent++;
            writer.Indent++;

            // Add the necessary properties and methods for IViewFor.
            writer.WriteLine("/// <summary>");
            writer.WriteLine("/// The view model dependency property.");
            writer.WriteLine("/// </summary>");
            writer.WriteLine("public static readonly DependencyProperty ViewModelProperty =");
            writer.Indent++;
            writer.WriteLine("DependencyProperty.Register(");
            writer.WriteLine("nameof(ViewModel),");
            writer.WriteLine($"typeof({iViewForInfo.ViewModelTypeName}),");
            writer.WriteLine($"typeof({iViewForInfo.ClassName}),");
            writer.WriteLine("new PropertyMetadata(null));");
            writer.WriteLine();

            writer.Indent--;
            writer.WriteLine("/// <summary>");
            writer.WriteLine("/// Gets the binding root view model.");
            writer.WriteLine("/// </summary>");
            writer.WriteLine($"public {iViewForInfo.ViewModelTypeName}? BindingRoot => ViewModel;");
            writer.WriteLine();

            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine($"public {iViewForInfo.ViewModelTypeName}? ViewModel");
            writer.WriteLine(Token(SyntaxKind.OpenBraceToken));
            writer.Indent++;
            writer.WriteLine($"get => ({iViewForInfo.ViewModelTypeName}?)GetValue(ViewModelProperty);");
            writer.WriteLine("set => SetValue(ViewModelProperty, value);");
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.WriteLine();

            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine("object? IViewFor.ViewModel");
            writer.WriteLine(Token(SyntaxKind.OpenBraceToken));
            writer.Indent++;
            writer.WriteLine("get => ViewModel;");
            writer.WriteLine($"set => ViewModel = ({iViewForInfo.ViewModelTypeName}?)value;");
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.WriteLine(TriviaList(
                                Trivia(NullableDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)),
                                Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)))
                                .NormalizeWhitespace());

            var output = stringStream.ToString();
            return ParseCompilationUnit(output).NormalizeWhitespace();
        }

        internal static CompilationUnitSyntax GetIViewForWinForms(IViewForInfo iViewForInfo)
        {
            UsingDirectiveSyntax[] usings =
                [
                    UsingDirective(ParseName("ReactiveUI")),
                    UsingDirective(ParseName("System.ComponentModel")),
                ];

            var code = CompilationUnit().AddMembers(
                    NamespaceDeclaration(IdentifierName(iViewForInfo.ClassNamespace))
                    .WithLeadingTrivia(TriviaList(
                        Comment("// <auto-generated/>"),
                        Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
                        Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))))
                    .AddMembers(
                        ClassDeclaration(iViewForInfo.ClassName)
                        .AddBaseListTypes(
                            SimpleBaseType(
                                GenericName(Identifier("IViewFor"))
                                .WithTypeArgumentList(
                                    TypeArgumentList(
                                        SingletonSeparatedList<TypeSyntax>(
                                            IdentifierName(iViewForInfo.ViewModelTypeName))))))
                        .AddModifiers([.. iViewForInfo.DeclarationSyntax.Modifiers])
                        .AddAttributeLists(AttributeList(SingletonSeparatedList(
                            Attribute(IdentifierName(AttributeDefinitions.GeneratedCode))
                            .AddArgumentListArguments(
                                AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).FullName))),
                                AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).Assembly.GetName().Version.ToString())))))))))
                .WithUsings(List(usings))
                .NormalizeWhitespace().ToFullString();

            // Remove the last 4 characters to remove the closing brackets
            var baseCode = code.Remove(code.Length - 4);

            // Prepare all necessary type names with type arguments
            using var stringStream = new StringWriter();
            using var writer = new IndentedTextWriter(stringStream, "\t");
            writer.WriteLine(baseCode);
            writer.Indent++;
            writer.Indent++;

            // Add the necessary properties and methods for IViewFor.
            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine("[Category(\"ReactiveUI\")]");
            writer.WriteLine("[Description(\"The ViewModel.\")]");
            writer.WriteLine("[Bindable(true)]");
            writer.WriteLine("[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]");
            writer.WriteLine($"public {iViewForInfo.ViewModelTypeName}? ViewModel " + "{ get; set; }");
            writer.WriteLine();

            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine("object? IViewFor.ViewModel");
            writer.WriteLine(Token(SyntaxKind.OpenBraceToken));
            writer.Indent++;
            writer.WriteLine("get => ViewModel;");
            writer.WriteLine($"set => ViewModel = ({iViewForInfo.ViewModelTypeName}?)value;");
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.WriteLine(TriviaList(
                                Trivia(NullableDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)),
                                Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)))
                                .NormalizeWhitespace());

            var output = stringStream.ToString();
            return ParseCompilationUnit(output).NormalizeWhitespace();
        }

        internal static CompilationUnitSyntax GetIViewForAvalonia(IViewForInfo iViewForInfo)
        {
            UsingDirectiveSyntax[] usings =
                [
                    UsingDirective(ParseName("System")),
                    UsingDirective(ParseName("ReactiveUI")),
                    UsingDirective(ParseName("Avalonia")),
                    UsingDirective(ParseName("Avalonia.Controls")),
                ];

            var code = CompilationUnit().AddMembers(
                    NamespaceDeclaration(IdentifierName(iViewForInfo.ClassNamespace))
                    .WithLeadingTrivia(TriviaList(
                        Comment("// <auto-generated/>"),
                        Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
                        Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))))
                    .AddMembers(
                        ClassDeclaration(iViewForInfo.ClassName)
                        .AddBaseListTypes(
                            SimpleBaseType(
                                GenericName(Identifier("IViewFor"))
                                .WithTypeArgumentList(
                                    TypeArgumentList(
                                        SingletonSeparatedList<TypeSyntax>(
                                            IdentifierName(iViewForInfo.ViewModelTypeName))))))
                        .AddModifiers([.. iViewForInfo.DeclarationSyntax.Modifiers])
                        .AddAttributeLists(AttributeList(SingletonSeparatedList(
                            Attribute(IdentifierName(AttributeDefinitions.GeneratedCode))
                            .AddArgumentListArguments(
                                AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).FullName))),
                                AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).Assembly.GetName().Version.ToString())))))))))
                .WithUsings(List(usings))
                .NormalizeWhitespace().ToFullString();

            // Remove the last 4 characters to remove the closing brackets
            var baseCode = code.Remove(code.Length - 4);

            // Prepare all necessary type names with type arguments
            using var stringStream = new StringWriter();
            using var writer = new IndentedTextWriter(stringStream, "\t");
            writer.WriteLine(baseCode);
            writer.Indent++;
            writer.Indent++;

            // Add the necessary properties and methods for IViewFor.
            writer.WriteLine("/// <summary>");
            writer.WriteLine("/// The view model dependency property.");
            writer.WriteLine("/// </summary>");
            writer.WriteLine("[System.Diagnostics.CodeAnalysis.SuppressMessage(\"AvaloniaProperty\", \"AVP1002\", Justification = \"Generic avalonia property is expected here.\")]");
            writer.WriteLine($"public static readonly StyledProperty<{iViewForInfo.ViewModelTypeName}?> ViewModelProperty =");
            writer.Indent++;
            writer.WriteLine("AvaloniaProperty");
            writer.WriteLine($".Register<{iViewForInfo.ClassName}, {iViewForInfo.ViewModelTypeName}?>(nameof(ViewModel));");

            writer.Indent--;
            writer.WriteLine("/// <summary>");
            writer.WriteLine("/// Gets the binding root view model.");
            writer.WriteLine("/// </summary>");
            writer.WriteLine($"public {iViewForInfo.ViewModelTypeName}? BindingRoot => ViewModel;");
            writer.WriteLine();

            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine($"public {iViewForInfo.ViewModelTypeName}? ViewModel");
            writer.WriteLine(Token(SyntaxKind.OpenBraceToken));
            writer.Indent++;
            writer.WriteLine($"get => ({iViewForInfo.ViewModelTypeName}?)GetValue(ViewModelProperty);");
            writer.WriteLine("set => SetValue(ViewModelProperty, value);");
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.WriteLine();

            writer.WriteLine("/// <inheritdoc/>");
            writer.WriteLine("object? IViewFor.ViewModel");
            writer.WriteLine(Token(SyntaxKind.OpenBraceToken));
            writer.Indent++;
            writer.WriteLine("get => ViewModel;");
            writer.WriteLine($"set => ViewModel = ({iViewForInfo.ViewModelTypeName}?)value;");
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.WriteLine();
            writer.WriteLine(
                $$"""

                                protected override void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change)
                                        {
                                            base.OnPropertyChanged(change);

                                            if (change.Property == DataContextProperty)
                                            {
                                                if (ReferenceEquals(change.OldValue, ViewModel)
                                                    && change.NewValue is null or {{iViewForInfo.ViewModelTypeName}})
                                                {
                                                    SetCurrentValue(ViewModelProperty, change.NewValue);
                                                }
                                            }
                                            else if (change.Property == ViewModelProperty)
                                            {
                                                if (ReferenceEquals(change.OldValue, DataContext))
                                                {
                                                    SetCurrentValue(DataContextProperty, change.NewValue);
                                                }
                                            }
                                        }
                                
                """);
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.Indent--;
            writer.WriteLine(Token(SyntaxKind.CloseBraceToken));
            writer.WriteLine(TriviaList(
                                Trivia(NullableDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)),
                                Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)))
                                .NormalizeWhitespace());

            var output = stringStream.ToString();
            return ParseCompilationUnit(output).NormalizeWhitespace();
        }

        internal static CompilationUnitSyntax GetIViewForMaui(IViewForInfo iViewForInfo) => CompilationUnit()
        .WithUsings(List([
                UsingDirective(IdentifierName("System")),
                UsingDirective(IdentifierName("ReactiveUI")),
                UsingDirective(ParseName("Microsoft.Maui.Controls")),
            ]))
        .WithMembers(
            SingletonList<MemberDeclarationSyntax>(
                NamespaceDeclaration(IdentifierName(iViewForInfo.ClassNamespace))
                .WithNamespaceKeyword(Token(
                    TriviaList(
                        Comment("// <auto-generated/>"),
                        Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.DisableKeyword), true)),
                        Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))),
                    SyntaxKind.NamespaceKeyword,
                    TriviaList()))
        .WithMembers(
            SingletonList<MemberDeclarationSyntax>(
                ClassDeclaration(iViewForInfo.ClassName)
                .WithAttributeLists(SingletonList(AttributeList(SingletonSeparatedList(Attribute(IdentifierName(AttributeDefinitions.GeneratedCode))
                    .AddArgumentListArguments(
                        AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).FullName))),
                        AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(typeof(IViewForGenerator).Assembly.GetName().Version.ToString()))))))))
                .WithModifiers(TokenList([.. iViewForInfo.DeclarationSyntax.Modifiers]))
                .WithBaseList(BaseList(SingletonSeparatedList<BaseTypeSyntax>(SimpleBaseType(GenericName(Identifier("IViewFor"))
                    .WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList<TypeSyntax>(IdentifierName(iViewForInfo.ViewModelTypeName))))))))
                .WithMembers(
                    List(
                        new MemberDeclarationSyntax[]
                        {
                            FieldDeclaration(VariableDeclaration(IdentifierName("BindableProperty"))
                                .WithVariables(SingletonSeparatedList(VariableDeclarator(Identifier("ViewModelProperty"))
                                    .WithInitializer(
                                        EqualsValueClause(
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    IdentifierName("BindableProperty"),
                                                    IdentifierName("Create")))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SeparatedList<ArgumentSyntax>(
                                                        new SyntaxNodeOrToken[]
                                                        {
                                                            Argument(InvocationExpression(IdentifierName(Identifier(
                                                                TriviaList(),
                                                                SyntaxKind.NameOfKeyword,
                                                                "nameof",
                                                                "nameof",
                                                                TriviaList())))
                                                                .WithArgumentList(ArgumentList(SingletonSeparatedList(Argument(IdentifierName("ViewModel")))))),
                                                            Token(SyntaxKind.CommaToken),
                                                            Argument(TypeOfExpression(ParseName(iViewForInfo.ViewModelTypeName))),
                                                            Token(SyntaxKind.CommaToken),
                                                            Argument(TypeOfExpression(GenericName(Identifier("IViewFor"))
                                                                    .WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList<TypeSyntax>(IdentifierName(iViewForInfo.ViewModelTypeName)))))),
                                                            Token(SyntaxKind.CommaToken),
                                                            Argument(DefaultExpression(ParseName(iViewForInfo.ViewModelTypeName))),
                                                            Token(SyntaxKind.CommaToken),
                                                            Argument(MemberAccessExpression(
                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                    IdentifierName("BindingMode"),
                                                                    IdentifierName("OneWay"))),
                                                            Token(SyntaxKind.CommaToken),
                                                            Argument(IdentifierName("OnViewModelChanged")).WithNameColon(NameColon(IdentifierName("propertyChanged")))
                                                        }))))))))
                            .WithModifiers(TokenList(
                                [
                                    Token(SyntaxKind.PublicKeyword),
                                    Token(SyntaxKind.StaticKeyword),
                                    Token(SyntaxKind.ReadOnlyKeyword)
                                ])),
                            PropertyDeclaration(NullableType(ParseName(iViewForInfo.ViewModelTypeName)), Identifier("BindingRoot"))
                            .WithModifiers(TokenList(Token(
                                TriviaList(Trivia(DocumentationCommentTrivia(
                                    SyntaxKind.SingleLineDocumentationCommentTrivia,
                                    List(
                                        new XmlNodeSyntax[]
                                        {
                                            XmlText()
                                            .WithTextTokens(TokenList(XmlTextLiteral(TriviaList(DocumentationCommentExterior("///")), " ", " ", TriviaList()))),
                                            XmlExampleElement(SingletonList<XmlNodeSyntax>(
                                                XmlText()
                                                .WithTextTokens(TokenList(
                                                    [
                                                        XmlTextNewLine(TriviaList(), "\r\n", "\r\n", TriviaList()),
                                                        XmlTextLiteral(
                                                            TriviaList(DocumentationCommentExterior("        ///")),
                                                            " Gets the binding root view model.",
                                                            " Gets the binding root view model.",
                                                            TriviaList()),
                                                        XmlTextNewLine(TriviaList(), "\r\n", "\r\n", TriviaList()),
                                                        XmlTextLiteral(
                                                            TriviaList(DocumentationCommentExterior("        ///")),
                                                            " ",
                                                            " ",
                                                            TriviaList())
                                                    ]))))
                                            .WithStartTag(XmlElementStartTag(XmlName(Identifier("summary"))))
                                            .WithEndTag(XmlElementEndTag(XmlName(Identifier("summary")))),
                                            XmlText().WithTextTokens(TokenList(XmlTextNewLine(TriviaList(), "\r\n", "\r\n", TriviaList())))
                                        })))),
                                SyntaxKind.PublicKeyword,
                                TriviaList())))
                            .WithExpressionBody(ArrowExpressionClause(IdentifierName("ViewModel")))
                            .WithSemicolonToken(Token(SyntaxKind.SemicolonToken)),
                            PropertyDeclaration(NullableType(ParseName(iViewForInfo.ViewModelTypeName)), Identifier("ViewModel"))
                            .WithModifiers(TokenList(Token(
                                TriviaList(Trivia(DocumentationCommentTrivia(
                                            SyntaxKind.SingleLineDocumentationCommentTrivia,
                                            List(
                                                new XmlNodeSyntax[]
                                                {
                                                    XmlText().WithTextTokens(TokenList(XmlTextLiteral(TriviaList(DocumentationCommentExterior("///")), " ", " ", TriviaList()))),
                                                    XmlNullKeywordElement().WithName(XmlName(Identifier("inheritdoc"))),
                                                    XmlText().WithTextTokens(TokenList(XmlTextNewLine(TriviaList(), "\r\n", "\r\n", TriviaList())))
                                                })))),
                                SyntaxKind.PublicKeyword,
                                TriviaList())))
                            .WithAccessorList(
                                AccessorList(
                                    List(
                                        new AccessorDeclarationSyntax[]
                                        {
                                            AccessorDeclaration(SyntaxKind.GetAccessorDeclaration)
                                            .WithExpressionBody(ArrowExpressionClause(CastExpression(
                                                NullableType(ParseName(iViewForInfo.ViewModelTypeName)),
                                                InvocationExpression(IdentifierName("GetValue"))
                                                    .WithArgumentList(ArgumentList(SingletonSeparatedList(Argument(IdentifierName("ViewModelProperty"))))))))
                                            .WithSemicolonToken(Token(SyntaxKind.SemicolonToken)),
                                            AccessorDeclaration(SyntaxKind.SetAccessorDeclaration)
                                            .WithExpressionBody(ArrowExpressionClause(InvocationExpression(IdentifierName("SetValue"))
                                                .WithArgumentList(ArgumentList(SeparatedList<ArgumentSyntax>(
                                                    new SyntaxNodeOrToken[]
                                                    {
                                                        Argument(IdentifierName("ViewModelProperty")),
                                                        Token(SyntaxKind.CommaToken),
                                                        Argument(IdentifierName("value"))
                                                    })))))
                                            .WithSemicolonToken(Token(SyntaxKind.SemicolonToken))
                                        }))),
                            PropertyDeclaration(
                                NullableType(PredefinedType(Token(
                                    TriviaList(Trivia(DocumentationCommentTrivia(
                                        SyntaxKind.SingleLineDocumentationCommentTrivia,
                                        List(
                                            new XmlNodeSyntax[]
                                            {
                                                XmlText().WithTextTokens(TokenList(XmlTextLiteral(TriviaList(DocumentationCommentExterior("///")), " ", " ", TriviaList()))),
                                                XmlNullKeywordElement().WithName(XmlName(Identifier("inheritdoc"))),
                                                XmlText().WithTextTokens(TokenList(XmlTextNewLine(TriviaList(), "\r\n", "\r\n", TriviaList())))
                                            })))),
                                    SyntaxKind.ObjectKeyword,
                                    TriviaList()))),
                                Identifier("ViewModel"))
                            .WithExplicitInterfaceSpecifier(ExplicitInterfaceSpecifier(IdentifierName("IViewFor")))
                            .WithAccessorList(AccessorList(
                                List(
                                    new AccessorDeclarationSyntax[]
                                    {
                                        AccessorDeclaration(SyntaxKind.GetAccessorDeclaration)
                                        .WithExpressionBody(ArrowExpressionClause(IdentifierName("ViewModel")))
                                        .WithSemicolonToken(Token(SyntaxKind.SemicolonToken)),
                                        AccessorDeclaration(SyntaxKind.SetAccessorDeclaration)
                                        .WithExpressionBody(ArrowExpressionClause(
                                            AssignmentExpression(
                                                SyntaxKind.SimpleAssignmentExpression,
                                                IdentifierName("ViewModel"),
                                                CastExpression(
                                                    NullableType(ParseName(iViewForInfo.ViewModelTypeName)),
                                                    IdentifierName("value")))))
                                        .WithSemicolonToken(Token(SyntaxKind.SemicolonToken))
                                    }))),
                            MethodDeclaration(PredefinedType(Token(SyntaxKind.VoidKeyword)), Identifier("OnBindingContextChanged"))
                            .WithModifiers(TokenList(
                                [
                                    Token(
                                        TriviaList(Trivia(DocumentationCommentTrivia(
                                            SyntaxKind.SingleLineDocumentationCommentTrivia,
                                            List(
                                                new XmlNodeSyntax[]
                                                {
                                                    XmlText().WithTextTokens(TokenList(XmlTextLiteral(TriviaList(DocumentationCommentExterior("///")), " ", " ", TriviaList()))),
                                                    XmlNullKeywordElement().WithName(XmlName(Identifier("inheritdoc"))),
                                                    XmlText().WithTextTokens(TokenList(XmlTextNewLine(TriviaList(), "\r\n", "\r\n", TriviaList())))
                                                })))),
                                        SyntaxKind.ProtectedKeyword,
                                        TriviaList()),
                                    Token(SyntaxKind.OverrideKeyword)
                                ]))
                            .WithBody(Block(
                                ExpressionStatement(InvocationExpression(
                                    MemberAccessExpression(
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        BaseExpression(),
                                        IdentifierName("OnBindingContextChanged")))),
                                ExpressionStatement(AssignmentExpression(
                                    SyntaxKind.SimpleAssignmentExpression,
                                    IdentifierName("ViewModel"),
                                    BinaryExpression(
                                        SyntaxKind.AsExpression,
                                        IdentifierName("BindingContext"),
                                        ParseName(iViewForInfo.ViewModelTypeName)))))),
                            MethodDeclaration(PredefinedType(Token(SyntaxKind.VoidKeyword)), Identifier("OnViewModelChanged"))
                            .WithModifiers(
                                TokenList(
                                    [
                                        Token(SyntaxKind.PrivateKeyword),
                                        Token(SyntaxKind.StaticKeyword)
                                    ]))
                            .WithParameterList(
                                ParameterList(
                                    SeparatedList<ParameterSyntax>(
                                        new SyntaxNodeOrToken[]
                                        {
                                            Parameter(Identifier("bindableObject")).WithType(IdentifierName("BindableObject")), Token(SyntaxKind.CommaToken),
                                            Parameter(Identifier("oldValue")).WithType(PredefinedType(Token(SyntaxKind.ObjectKeyword))), Token(SyntaxKind.CommaToken),
                                            Parameter(Identifier("newValue")).WithType(PredefinedType(Token(SyntaxKind.ObjectKeyword)))
                                        })))
                            .WithExpressionBody(
                                ArrowExpressionClause(
                                    AssignmentExpression(
                                        SyntaxKind.SimpleAssignmentExpression,
                                        MemberAccessExpression(SyntaxKind.SimpleMemberAccessExpression, IdentifierName("bindableObject"), IdentifierName("BindingContext")),
                                        IdentifierName("newValue"))))
                            .WithSemicolonToken(Token(SyntaxKind.SemicolonToken))
                        }))))))
        .WithEndOfFileToken(Token(TriviaList([Trivia(NullableDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)), Trivia(PragmaWarningDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true))]), SyntaxKind.EndOfFileToken, TriviaList()))
        .NormalizeWhitespace();
    }
}
